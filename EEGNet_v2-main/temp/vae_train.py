# -*- coding: utf-8 -*-
"""vae.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N6SlXQr0PesTG3Qlt-ZdAnng7VK-I5Fk
"""

from google.colab import drive
drive.mount("/content/drive")
version = 12

path = "/content/drive/MyDrive/eeg/"
path2 = "/content/drive/MyDrive/model/vae_model_"+ str(version)

import gc

gc.collect()

print(path2)

from EEG_VAE import vae,EEG_CNN_VAE,gen
# from vaenew import vae,EEG_CNN_VAE,gen
import matplotlib.pyplot as plt

import os
import numpy as np
import torch
import torch.nn as nn

# from EEG_VAE import vae,EEG_CNN_VAE,gen

from torch.autograd import Variable
from torch.utils.data import Dataset, DataLoader
import random
import time

seed_n = np.random.randint(6969)
train_data = [np.load(path+'train_data_numpy.npy')]
train_data = np.concatenate(train_data)
train_data = train_data.reshape(train_data.shape[0],train_data.shape[2],train_data.shape[3])
train_label = [np.load(path+'train_labels_numpy.npy')]
train_label = np.concatenate(train_label)
# print(train_label)

vae(train_data,train_label,seed_n,path2)
# data = data.reshape(-1,1,22,1125)
# labels = labels.reshape(-1,1)
# print(data.shape,labels.shape)
# print(labels)

train_data.shape





model = EEG_CNN_VAE()
model.load_state_dict(torch.load(path2))
model.eval()

path2 = "/content/drive/MyDrive/model/vae_model_11"
gen_size = [1]
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

T = 3.0
# frequency class
nf = 0


def fft_data(input_data):
    ffts = []
    for block in range(input_data.shape[0]):
        for channel in range(input_data.shape[-1]):
            input_data[block, :, channel] -= input_data[block, :, channel].mean()
            # print data.shape
            ffts.append(np.abs(np.fft.rfft(input_data[block, :, channel])))
    mean_fft = np.stack(ffts).mean(axis=0)
    return mean_fft


def plot_fft(x_axis, data_fft):
    plt.plot(x_axis, data_fft, 'tab:red')

    plt.xlabel('Frequency', fontsize=17)
    plt.ylabel('Amplitude', fontsize=17)
    plt.axis(xmin=5, xmax=70)
    plt.axis(ymin=0, ymax=20)
    plt.tight_layout()
    filename = "fake2_plot_class%i.pdf"
    plt.savefig(filename % (nf), format='PDF', bbox_inches='tight')

temp_data,labels = gen(gen_size,model.to(device))

data = temp_data["1"][3]


print(data.shape)
# data = data - np.min(data)
# data = data / np.max(data)

data = np.squeeze(data,axis=0)
data = np.transpose(data)
data = data[np.newaxis,:,:1]
print(np.max(data))
print(np.min(data))

np.std(data)

data_fft = fft_data(data)
x_axis = np.linspace(0, (data.shape[1] / T) / 2, data_fft.shape[0])

plot_fft(x_axis, data_fft)

from EEG_VAE import gen

data,labels = gen([50],model)



print(data.keys(),labels.keys())
print(data["50"].shape)

# gen = [500,1000,2000,5000]
# for i in gen:
#   temp_data  = data[str(i)].reshape(-1,1,22,1125)
#   temp_labels = labels[str(i)].reshape(-1,1)
#   print(temp_data.shape,temp_labels.shape)
#   np.save(path+"vae_gandata"+str(i),temp_data)
#   np.save(path+"labels_vaegandata"+str(i),temp_labels)





# gensize = 2000
# np.save(path+"vae_gandata"+str(gensize),data)
# np.save(path+"labels_vaegandata"+str(gensize),labels)



